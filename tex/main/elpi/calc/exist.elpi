% for now this is only needed to interpret sum types, so no interpretation is needed.


ofType (exist B C) KIND IE
    :- ofType B KIND1 IE
    ,  (pi x\ locDecl x B  => ofType (C x) KIND2 IE)
    ,  pts_for KIND1 KIND2 KIND
    .
    
of (pair_exist B C BB CC) (exist B C) IE 
    :- ofType B _ IE
    ,  (isa BB B IE)
    ,  (isa CC (C BB) IE)
    ,  (pi x\ locDecl x B => ofType (C x) _ IE)
    .

of (elim_exist Pair M MM) M IE 
    :- of Pair (exist B C) IE
    ,  ofType M KIND IE
    ,  pts_leq KIND propc
    ,  (pi x \ pi y \ locDecl x B => locDecl y (C x) =>  
                of (MM x y) M IE)
    .

hstep (elim_exist W M MM) (MM Bb Cc) 
    :- hnf W (pair_exist B C Bb Cc)
    ,  isa Bb B IE
    ,  isa Cc (C Bb) IE
    ,  (pi x \ pi y \ locDecl x B => locDecl y (C x) =>  
            of (MM x y) M IE)
    .

dconv (pair_exist B C Bb Cc) (pair_exist B' C' Bb' Cc')
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    ,  (conv Bb Bb')
    ,  (conv Cc Cc')
    .
dconv (elim_exist Pair M Mm) (elim_exist Pair' M' Mm') 
    :- (conv Pair Pair')
    ,  (of Pair (exist B C) IE)
    ,  (pi x\ pi y\ locDecl x B => locDecl y (C x)
        => conv (Mm x y) (Mm' x y))
    ,  (conv M M')
    .

dconv (exist B C) (exist B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x A => conv (C x) (C' x))
    .
