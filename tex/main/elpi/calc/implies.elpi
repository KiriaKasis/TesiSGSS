%as in forall just the needed predicates where implemented. most of the interpretation is missing



ofType (implies B C) KIND IE
    :- ofType B KIND IE
    ,  (pi x\ locDecl x B => ofType C KIND IE)
    .

of (impl_lam B F) (implies B C) IE
    :- (isaType B propc IE)
    ,  (isaType C propc IE)
    ,  (pi x\ locDecl x B => isa (F x) C IE)
    .

of (impl_app Lam X) C IE
    :- spy(isa Lam (implies B C) IE)
    ,  spy(isa X B IE)
    .

hstep (impl_app LAM Bb) (F Bb)
    :- hnf LAM (impl_lam B F)
    ,  ofType B KIND IE
    ,  (pts_leq KIND propc)
    ,  isa Bb B IE
    ,  (pi x\ locDecl x B => isa (F x) (C x) IE )
    ,  (pi x\ locDecl x B => ofType (C x) KIND' IE )
    ,  pts_leq KIND' propc
    .

        
dconv (implies B C) (implies B' C') :- (conv B B'), (conv C C').
dconv (impl_app F X) (impl_app F' X') :- (conv F F'), (conv X X').
dconv (impl_lam B F) (impl_lam B' F') 
    :- (conv B B')
    ,  pi x\ locDecl x B =>
                (conv (F x) (F' x)).








interp (implies B C) (forall B' C') 
    :- interp B B'
    ,  spy(pi x\ pi x'\ 
        (  interp x x'
        ,  locDecl x B
        ,  locDecl x' B') 
            =>  interp C (C' x')
    )
    .