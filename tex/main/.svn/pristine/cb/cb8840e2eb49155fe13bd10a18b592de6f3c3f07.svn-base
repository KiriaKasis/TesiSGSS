<html><head><style type="text/css">pre { margin: 1px }
			.fmt0 {  } /* normal */
			.fmt1 {  } /* background */
			.fmt2 { background-color: #ffcabf; } /* line:error */
			.fmt3 { background-color: #fffbbf; } /* line:warning */
			.fmt4 { background-color: #bfd6ff; } /* line:badbox */
			.fmt5 {  } /* line:bookmark */
			.fmt6 {  } /* line:bookmark0 */
			.fmt7 {  } /* line:bookmark1 */
			.fmt8 {  } /* line:bookmark2 */
			.fmt9 {  } /* line:bookmark3 */
			.fmt10 {  } /* line:bookmark4 */
			.fmt11 {  } /* line:bookmark5 */
			.fmt12 {  } /* line:bookmark6 */
			.fmt13 {  } /* line:bookmark7 */
			.fmt14 {  } /* line:bookmark8 */
			.fmt15 {  } /* line:bookmark9 */
			.fmt16 { color: #555580; } /* magicComment */
			.fmt17 { background-color: #a8cf83; } /* commentTodo */
			.fmt18 { color: #808080; } /* comment */
			.fmt19 { color: #800000; } /* keyword */
			.fmt20 { font-weight: 700;color: #0095ff; } /* extra-keyword */
			.fmt21 { color: #808000; } /* math-keyword */
			.fmt22 { border-bottom: 1px solid #0000ff;color: #0000ff; } /* link */
			.fmt23 { font-weight: 700;color: #0055ff; } /* align-ampersand */
			.fmt24 { color: #008080; } /* verbatim */
			.fmt25 { color: #800000; } /* sweave-block */
			.fmt26 { font-weight: 700;color: #0095ff; } /* sweave-delimiter */
			.fmt27 { color: #800000; } /* pweave-block */
			.fmt28 { font-weight: 700;color: #0095ff; } /* pweave-delimiter */
			.fmt29 { color: #804000; } /* picture */
			.fmt30 { color: #c06000; } /* picture-keyword */
			.fmt31 { font-weight: 700;background-color: #ffff7f; } /* braceMatch */
			.fmt32 { font-weight: 700;color: #ffff7f;background-color: #c00000; } /* braceMismatch */
			.fmt33 { color: #000000;background-color: #ffef0b; } /* search */
			.fmt34 { color: #008000; } /* numbers */
			.fmt35 { color: #509600; } /* math-delimiter */
			.fmt36 { color: #ff0000; } /* text */
			.fmt37 { color: #ff0088; } /* escapeseq */
			.fmt38 { border-bottom: 1px dashed #ff0000; } /* spellingMistake */
			.fmt39 { border-bottom: 1px dashed #008000; } /* wordRepetition */
			.fmt40 { border-bottom: 1px dashed #008000; } /* wordRepetitionLongRange */
			.fmt41 { text-decoration: line-through; } /* badWord */
			.fmt42 { border-bottom: 1px dashed #000080; } /* grammarMistake */
			.fmt43 { background-color: #00ffa0; } /* grammarMistakeSpecial1 */
			.fmt44 { background-color: #00c0ff; } /* grammarMistakeSpecial2 */
			.fmt45 { background-color: #00ff00; } /* grammarMistakeSpecial3 */
			.fmt46 { background-color: #c8ff61; } /* grammarMistakeSpecial4 */
			.fmt47 { background-color: #ffbf9f; } /* latexSyntaxMistake */
			.fmt48 { font-style: italic;color: #0000ff; } /* temporaryCodeCompletion */
			.fmt49 { color: #000080; } /* environment */
			.fmt50 { color: #008000; } /* referencePresent */
			.fmt51 { border-bottom: 1px dashed #008000;color: #008000; } /* referenceMissing */
			.fmt52 { border-bottom: 1px dashed #800080;color: #800080; } /* referenceMultiple */
			.fmt53 { color: #008000; } /* citationPresent */
			.fmt54 { border-bottom: 1px dashed #008000;color: #008000; } /* citationMissing */
			.fmt55 { color: #008000; } /* packagePresent */
			.fmt56 { border-bottom: 1px dashed #008000;color: #008000; } /* packageMissing */
			.fmt57 { font-weight: 700;color: #000000; } /* structure */
			.fmt58 { background-color: #eeeeff; } /* current */
			.fmt59 { background-color: #b2d8ff; } /* selection */
			.fmt60 { background-color: #ffaaaa; } /* replacement */
			.fmt61 { text-decoration: line-through;background-color: #ffaaaa; } /* diffDelete */
			.fmt62 { background-color: #aaffaa; } /* diffAdd */
			.fmt63 { background-color: #ffff50; } /* diffReplace */
			.fmt64 { background-color: #ddffcc; } /* previewSelection */
			.fmt65 { font-weight: 700;color: #0095ff; } /* txs-test */
			.fmt66 { font-weight: 700; } /* txs-test-summary */
			.fmt67 { color: #008000; } /* txs-test-pass */
			.fmt68 { color: #c00000; } /* txs-test-fail */
			.fmt69 { color: #ea8800; } /* txs-test-warn */
			.fmt70 { color: #808000; } /* txs-test-qdebug */
			.fmt71 { color: #ffa500; } /* dtx:guard */
			.fmt72 { font-weight: 700;color: #006400; } /* dtx:macro */
			.fmt73 { color: #008080; } /* dtx:verbatim */
			.fmt74 { color: #cc8100; } /* dtx:specialchar */
			.fmt75 { font-weight: 700;color: #10c010; } /* dtx:commands */
			.fmt76 { color: #b200ff; } /* lua:keyword */
			.fmt77 { color: #808080; } /* lua:comment */
			.fmt78 { color: #804000; } /* asymptote:block */
			.fmt79 { color: #800080; } /* asymptote:keyword */
			.fmt80 { color: #808000; } /* asymptote:type */
			.fmt81 { color: #008000; } /* asymptote:numbers */
			.fmt82 { color: #000080; } /* asymptote:string */
			.fmt83 { color: #808080; } /* asymptote:comment */
			.fmt84 { color: #808080; } /* qtscript:comment */
			.fmt85 { color: #008000; } /* qtscript:string */
			.fmt86 { color: #000080; } /* qtscript:number */
			.fmt87 { color: #808000; } /* qtscript:keyword */
			.fmt88 { color: #800000; } /* qtscript:txs-variable */
			.fmt89 { font-style: italic; } /* qtscript:txs-function */
			.fmt90 { background-color: #ffff7f; } /* preedit */
		</style></head><body><pre><span class="fmt16">%</span><span class="fmt16"> </span><span class="fmt16">!TeX</span><span class="fmt16"> </span><span class="fmt16">program</span><span class="fmt16"> </span><span class="fmt16">=</span><span class="fmt16"> </span><span class="fmt16">lualatex</span> </pre>
		<pre><span class="fmt16">%</span><span class="fmt16"> </span><span class="fmt16">!TeX</span><span class="fmt16"> </span><span class="fmt16">encoding</span><span class="fmt16"> </span><span class="fmt16">=</span><span class="fmt16"> </span><span class="fmt16">UTF-8</span> </pre>
		<pre><span class="fmt16">%</span><span class="fmt16"> </span><span class="fmt16">!TeX</span><span class="fmt16"> </span><span class="fmt16">root</span><span class="fmt16"> </span><span class="fmt16">=</span><span class="fmt16"> </span><span class="fmt16">./thesis.tex</span> </pre>
		<pre> </pre>
		<pre><span class="fmt20">\chapter</span>{<span class="fmt57">Higher</span><span class="fmt57"> </span><span class="fmt57">Order</span><span class="fmt57"> </span><span class="fmt57">Logic</span><span class="fmt57"> </span><span class="fmt57">Programming</span>} </pre>
		<pre> </pre>
		<pre>At the beginning of our work it was decided that the this project should be implemented using <span class="fmt35">$</span><span class="fmt21">\lambda</span><span class="fmt35">$</span><span class="fmt38">Prolog</span> and <span class="fmt38">ELPI</span>, one of its implementations which allows for more flexibility (<span class="fmt19">\eg</span> optional type declarations) more functionality (<span class="fmt19">\eg</span> constraint programming, which will be useful in later phases of the project) and also improved performances compared to other major implementations of <span class="fmt35">$</span><span class="fmt21">\lambda</span><span class="fmt35">$</span><span class="fmt38">Prolog</span>. </pre>
		<pre> </pre>
		<pre>As a programming language <span class="fmt35">$</span><span class="fmt21">\lambda</span><span class="fmt35">$</span><span class="fmt38">Prolog</span> is naturally a good fit for a binder-heavy project like our as it natively offer all the functionality required to handle <span class="fmt35">$</span><span class="fmt21">\alpha</span><span class="fmt35">$</span>-equivalence, capture avoiding substitutions and higher-order unification; moreover the high level abstractions and backtracking allow for almost a 1-1 encoding of inference rules. As an example  below we can see the comparison between a natural deduction inference rule and a <span class="fmt35">$</span><span class="fmt21">\lambda</span><span class="fmt35">$</span><span class="fmt38">Prolog</span> clause in the case of <span class="fmt35">$</span><span class="fmt21">\Pi</span><span class="fmt35">$</span>-Introduction </pre>
		<pre> </pre>
		<pre><span class="fmt35">\[</span> </pre>
		<pre><span class="fmt21">\begin</span><span class="fmt34">{</span><span class="fmt34"><span class="fmt49">prooftree</span></span><span class="fmt34">}</span> </pre>
		<pre><span class="fmt21"><span class="fmt47">\hypo</span></span><span class="fmt34">{C(x)\</span><span class="fmt34"> </span><span class="fmt34">set\</span><span class="fmt34"> </span><span class="fmt34">[x</span><span class="fmt34"> </span><span class="fmt21">\in</span><span class="fmt34"> </span><span class="fmt34">B]}</span> </pre>
		<pre><span class="fmt21"><span class="fmt47">\hypo</span></span><span class="fmt34">{B\</span><span class="fmt34"> </span><span class="fmt34">set}</span> </pre>
		<pre><span class="fmt21"><span class="fmt47">\infer</span></span><span class="fmt34">{2}[</span><span class="fmt21">\ensuremath</span><span class="fmt34">{</span><span class="fmt21">\Pi</span><span class="fmt34">}-F]{</span><span class="fmt21">\Pi</span><span class="fmt34">_{x</span><span class="fmt21">\in</span><span class="fmt34"> </span><span class="fmt34">B}{C(x)}\</span><span class="fmt34"> </span><span class="fmt34">set}</span> </pre>
		<pre><span class="fmt21">\end</span><span class="fmt34">{</span><span class="fmt34"><span class="fmt49">prooftree</span></span><span class="fmt34">}</span><span class="fmt35">\]</span> </pre>
		<pre><span class="fmt18">%Ï€</span> </pre>
		<pre><span class="fmt18">%\begin{minted}[mathescape,</span> </pre>
		<pre><span class="fmt18">%linenos,</span> </pre>
		<pre><span class="fmt18">%numbersep=5pt,</span> </pre>
		<pre><span class="fmt18">%gobble=2,</span> </pre>
		<pre><span class="fmt18">%frame=lines,</span> </pre>
		<pre><span class="fmt18">%framesep=2mm]{csharp}</span> </pre>
		<pre><span class="fmt18">%string</span><span class="fmt18"> </span><span class="fmt18">title</span><span class="fmt18"> </span><span class="fmt18">=</span><span class="fmt18"> </span><span class="fmt18">"This</span><span class="fmt18"> </span><span class="fmt18">is</span><span class="fmt18"> </span><span class="fmt18">a</span><span class="fmt18"> </span><span class="fmt18">Unicode</span><span class="fmt18">  </span><span class="fmt18">in</span><span class="fmt18"> </span><span class="fmt18">the</span><span class="fmt18"> </span><span class="fmt18">sky"</span> </pre>
		<pre><span class="fmt18">%/*</span> </pre>
		<pre><span class="fmt18">%Defined</span><span class="fmt18"> </span><span class="fmt18">as</span><span class="fmt18"> </span><span class="fmt18">$\pi=\lim_{n\to\infty}\frac{P_n}{d}$</span><span class="fmt18"> </span><span class="fmt18">where</span><span class="fmt18"> </span><span class="fmt18">$P$</span><span class="fmt18"> </span><span class="fmt18">is</span><span class="fmt18"> </span><span class="fmt18">the</span><span class="fmt18"> </span><span class="fmt18">perimeter</span> </pre>
		<pre><span class="fmt18">%of</span><span class="fmt18"> </span><span class="fmt18">an</span><span class="fmt18"> </span><span class="fmt18">$n$-sided</span><span class="fmt18"> </span><span class="fmt18">regular</span><span class="fmt18"> </span><span class="fmt18">polygon</span><span class="fmt18"> </span><span class="fmt18">circumscribing</span><span class="fmt18"> </span><span class="fmt18">a</span> </pre>
		<pre><span class="fmt18">%circle</span><span class="fmt18"> </span><span class="fmt18">of</span><span class="fmt18"> </span><span class="fmt18">diameter</span><span class="fmt18"> </span><span class="fmt18">$d$.</span> </pre>
		<pre><span class="fmt18">%*/</span> </pre>
		<pre><span class="fmt18">%const</span><span class="fmt18"> </span><span class="fmt18">double</span><span class="fmt18"> </span><span class="fmt18">pi</span><span class="fmt18"> </span><span class="fmt18">=</span><span class="fmt18"> </span><span class="fmt18">3.1415926535</span> </pre>
		<pre><span class="fmt18">%\end{minted}</span> </pre>
		<pre> </pre>
		<pre><span class="fmt20">\begin{</span><span class="fmt20"><span class="fmt49">lstlisting</span></span><span class="fmt20">}</span><span class="fmt24">[frame=single,</span><span class="fmt24"> </span><span class="fmt24">language=Prolog]</span><span class="fmt24">  </span><span class="fmt24">%</span><span class="fmt24"> </span><span class="fmt24">Start</span><span class="fmt24"> </span><span class="fmt24">your</span><span class="fmt24"> </span><span class="fmt24">code-block</span> </pre>
		<pre><span class="fmt24">for</span><span class="fmt24"> </span><span class="fmt24">i:=maxint</span><span class="fmt24"> </span><span class="fmt24">to</span><span class="fmt24"> </span><span class="fmt24">0</span><span class="fmt24"> </span><span class="fmt24">do</span> </pre>
		<pre><span class="fmt24">begin</span> </pre>
		<pre><span class="fmt24">{</span><span class="fmt24"> </span><span class="fmt24">do</span><span class="fmt24"> </span><span class="fmt24">nothing</span><span class="fmt24"> </span><span class="fmt24">}</span> </pre>
		<pre><span class="fmt24">end;</span> </pre>
		<pre><span class="fmt24">Write('Case</span><span class="fmt24"> </span><span class="fmt24">insensitive</span><span class="fmt24"> </span><span class="fmt24">');</span> </pre>
		<pre><span class="fmt24">Write('Pascal</span><span class="fmt24"> </span><span class="fmt24">keywords.');</span> </pre>
		<pre><span class="fmt20">\end{</span><span class="fmt20"><span class="fmt49">lstlisting</span></span><span class="fmt20">}</span> </pre>
		<pre> </pre>
		<pre><span class="fmt19">\lstinputlisting</span>[language=Prolog, firstline=1, lastline=3]{listings.elpi} </pre></body></html>