% !TeX program = lualatex
% !TeX encoding = UTF-8
% !TeX root = ./thesis.tex

\chapter{Higher Order Logic Programming}

At the beginning of our work it was decided that the this project should be implemented using $\lambda$Prolog and ELPI, one of its implementations which allows for more flexibility (\eg optional type declarations) more functionality (\eg constraint programming, which will be useful in later phases of the project) and also improved performances compared to other major implementations of $\lambda$Prolog.

As a programming language $\lambda$Prolog is naturally a good fit for a binder-heavy project like our as it natively offer all the functionality required to handle $\alpha$-equivalence, capture avoiding substitutions and higher-order unification; moreover the high level abstractions and backtracking allow for almost a 1-1 encoding of inference rules. As an example  below we can see the comparison between a natural deduction inference rule and a $\lambda$Prolog clause in the case of $\Pi$-Introduction.
In natural deduction style we have the following inference rule
\[
\begin{prooftree}
\hypo{C(x)\ set\ [x \in B]}
\hypo{B\ set}
\infer{2}[\ensuremath{\Pi}-F]{\Pi_{x\in B}{C(x)}\ set}
\end{prooftree}\]
while in $\lambda$Prolog we would write
\begin{verbatim}
ofType (setPi B C) KIND3 IE
    :- ofType B KIND1 IE
    ,  (pi x\ locDecl x B
        => ofType (C x) KIND2 IE)
    ,  pts_fun KIND1 KIND2 KIND3
    .
\end{verbatim}
where \verb|ofType|
%Ï€
%\begin{minted}[mathescape,
%linenos,
%numbersep=5pt,
%gobble=2,
%frame=lines,
%framesep=2mm]{csharp}
%string title = "This is a Unicode  in the sky"
%/*
%Defined as $\pi=\lim_{n\to\infty}\frac{P_n}{d}$ where $P$ is the perimeter
%of an $n$-sided regular polygon circumscribing a
%circle of diameter $d$.
%*/
%const double pi = 3.1415926535
%\end{minted}
%
%\begin{lstlisting}[frame=single, language=Prolog]  % Start your code-block
%for i:=maxint to 0 do
%begin
%{ do nothing }
%end;
%Write('Case insensitive ');
%Write('Pascal keywords.');
%\end{lstlisting}

\lstinputlisting[language=Prolog, firstline=1, lastline=3]{listings.elpi}