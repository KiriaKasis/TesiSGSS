% !TeX program = lualatex
% !TeX encoding = UTF-8
% !TeX root = build/main.tex

	


	Combining the translator with a proof extraction component it will be possible to extract programs from proofs written in the extensional level.
	
	We have chosen LambdaProlog [3](and its recent implementation ELPI [4], by the second author) as the programming language to write the two type checkers and the translator. The benefits are that LambdaProlog takes care of the intricacies of dealing with binders and alpha-conversion and moreover a LambdaProlog implementation of a syntax-directed judgement is just made of simple clauses that are almost literal translations of the judgemental rules. This allows humans (and logicians in particular) to simply inspect the code to spot possible errors.
	
	At the time of the submission of the abstract the two type-checkers are completed and we are working on the extension of the calculus and on the translator.
	
	
	[1] Maietti, Maria Emilia, and Giovanni Sambin. "Toward a minimalist foundation for constructive mathematics." From Sets and Types to Topology and Analysis: Practicable Foundations for Constructive Mathematics 48 (2005): 91-114.
	
	[2] Maietti, Maria Emilia. "A minimalist two-level foundation for constructive mathematics." Annals of Pure and Applied Logic 160.3 (2009): 319-354.
	
	[3] Nadathur, Gopalan, and Dale Miller. "An overview of Lambda-PROLOG." (1988).
	
	[4] Dunchev, Cvetan, et al. "ELPI: Fast, Embeddable,\lambda Prolog Interpreter." Logic for Programming, Artificial Intelligence, and Reasoning. Springer, Berlin, Heidelberg, 2015. 